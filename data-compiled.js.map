{"version":3,"sources":["data.js"],"names":[],"mappings":";;;;;;IAAM,IAAI,GACK,SADT,IAAI,CACM,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE;0BADjC,IAAI;;AAEF,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAI,CAAC,OAAO,GAAG,OAAO,CAAC;CAC1B;;IAGC,KAAK;AACI,aADT,KAAK,CACK,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE;8BADpC,KAAK;;AAEH,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;;iBALC,KAAK;;eAOI,qBAAC,GAAG,EAAE;AACb,gBAAI,GAAG,KAAK,SAAS,EAAE;AACnB,mBAAG,GAAG,EAAE,CAAC;aACZ;AACD,gBAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC/B,mBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB,CAAC,CAAC;AACH,gBAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AACtC,qBAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aAC1B,CAAC,CAAC;AACH,mBAAO,GAAG,CAAC;SAEd;;;eAEO,oBAAG;AACP,gBAAI,OAAO,GAAG;AACV,sBAAM,EAAE,CAAC;AACT,sBAAM,EAAE,CAAC;AACT,uBAAO,EAAE,CAAC;aACb,CAAC;;AAEF,gBAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAClC,oBAAQ,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC7B,oBAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,EAAE;AACzB,2BAAO,CAAC,MAAM,EAAE,CAAC;iBACpB,MACI;AACD,2BAAO,CAAC,MAAM,EAAE,CAAC;iBACpB;AACD,uBAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;aAEnC,CAAC,CAAC;;AAEH,mBAAO,OAAO,CAAC;SAClB;;;WAzCC,KAAK;;;AA6CX,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;AACxC,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;AACnD,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;;AAExC,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAClD,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAC7C,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;;AAEnD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAChC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC","file":"data-compiled.js","sourcesContent":["class Test {\r\n    constructor(name, status, runtime) {\r\n        this.name = name;\r\n        this.status = status;\r\n        this.runtime = runtime;\r\n    }\r\n}\r\n\r\nclass Suite {\r\n    constructor(name, childSuites, tests) {\r\n        this.name = name;\r\n        this.childSuites = childSuites;\r\n        this.tests = tests;\r\n    }\r\n\r\n    getAllTests(arr) {\r\n        if (arr === undefined) {\r\n            arr = [];\r\n        }\r\n        this.tests.forEach(function (test) {\r\n            arr.push(test);\r\n        });\r\n        this.childSuites.forEach(function (child) {\r\n            child.getAllTests(arr);\r\n        });\r\n        return arr;\r\n\r\n    }\r\n\r\n    getTotal() {\r\n        var summary = {\r\n            passed: 0,\r\n            failed: 0,\r\n            runtime: 0\r\n        };\r\n\r\n        var allTests = this.getAllTests();\r\n        allTests.forEach(function (test) {\r\n            if (test.status != \"passed\") {\r\n                summary.failed++;\r\n            }\r\n            else {\r\n                summary.passed++;\r\n            }\r\n            summary.runtime += test.runtime;\r\n\r\n        });\r\n\r\n        return summary;\r\n    }\r\n}\r\n\r\n\r\nvar foo = new Test(\"foo\", \"passed\", 42);\r\nvar bar = new Test(\"bar goes wrong\", \"failed\", 42);\r\nvar baz = new Test(\"baz\", \"passed\", 42);\r\n\r\nvar groupA = new Suite(\"group a\", [], [foo, bar]);\r\nvar groupB = new Suite(\"group b\", [], [baz]);\r\nvar root = new Suite(\"root\", [groupA, groupB], []);\r\n\r\nconsole.log(root.getAllTests());\r\nconsole.log(root.getTotal());"]}