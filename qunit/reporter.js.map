{"version":3,"sources":["reporter.es6.js"],"names":[],"mappings":";;;;;;;;;;;;;;;QAIqB,YAAY;AAClB,iBADM,YAAY,GACf;kCADG,YAAY;;AAEzB,uCAFa,YAAY,6CAEjB;AACR,iBAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACnC,iBAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3C,iBAAK,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAE/C,gBAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,gBAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SAEpB;;kBAVgB,YAAY;;qBAAZ,YAAY;;mBAYnB,oBAAC,OAAO,EAAE;AAChB,oBAAI,MAAM,CAAC;AACX,oBAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;AACrB,0BAAM,GAAG,QAAQ,CAAC;iBACrB,MACI;AACD,0BAAM,GAAG,QAAQ,CAAC;iBACrB;AACD,oBAAI,IAAI,GAAG,UAvBX,IAAI,CAuBgB,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;AAC3D,oBAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;AAClC,oBAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;aAE9B;;;mBAEK,gBAAC,OAAO,EAAE;AACZ,oBAAI,WAAW,GAAG,UA9BZ,KAAK,CA8BiB,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACjD,oBAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;aACpC;;;mBAEW,sBAAC,OAAO,EAAE;;;;;;AAClB,yCAAa,OAAO,CAAC,KAAK,8HAAC;AAAtB,4BAAI;;;;;AAIL,4BAAG,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAA,AAAC,EAAC;AAC5B,mCAAO;yBACV;qBACJ;;;;;;;;;;;;;;;;AACD,oBAAI,SAAS,GAAG,EAAE,CAAC;;;;;;AACnB,0CAAa,OAAO,CAAC,KAAK,mIAAC;AAAtB,4BAAI;;AACL,iCAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AACxC,+BAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBAClC;;;;;;;;;;;;;;;;AAED,oBAAI,KAAK,GAAG,UAjDN,KAAK,CAiDW,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;AACnD,oBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxB,oBAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aAChC;;;eAjDgB,YAAY;;;qBAAZ,YAAY","file":"reporter.js","sourcesContent":["import EventEmitter from \"../eventemitter\"\r\nimport {Test, Suite} from \"../data\"\r\n\r\n\r\nexport default class QUnitAdapter extends EventEmitter {\r\n    constructor() {\r\n        super();\r\n        QUnit.done(this.onDone.bind(this));\r\n        QUnit.testDone(this.onTestDone.bind(this));\r\n        QUnit.moduleDone(this.onModuleDone.bind(this));\r\n\r\n        this.tests = {};\r\n        this.suites = [];\r\n\r\n    }\r\n\r\n    onTestDone(details) {\r\n        var status;\r\n        if (details.failed != 0) {\r\n            status = \"failed\";\r\n        }\r\n        else {\r\n            status = \"passed\";\r\n        }\r\n        var test = new Test(details.name, status, details.runtime);\r\n        this.tests[details.testId] = test;\r\n        this.emit(\"testEnd\", test);\r\n\r\n    }\r\n\r\n    onDone(details) {\r\n        var globalSuite = new Suite(\"\", this.suites, []);\r\n        this.emit(\"runEnd\", globalSuite);\r\n    }\r\n\r\n    onModuleDone(details) {\r\n        for (test of details.tests){\r\n            // check if the module is actually finished:\r\n            // QUnit may trigger moduleDone multiple times if it reorders tests\r\n            // if not, return and wait for the next moduleDone\r\n            if(!(test.testId in this.tests)){\r\n                return;\r\n            }\r\n        }\r\n        var testArray = [];\r\n        for (test of details.tests){\r\n            testArray.push(this.tests[test.testId]);\r\n            delete this.tests[test.testId];\r\n        }\r\n\r\n        var suite = new Suite(details.name, [], testArray);\r\n        this.suites.push(suite);\r\n        this.emit(\"suiteEnd\", suite);\r\n    }\r\n}"]}